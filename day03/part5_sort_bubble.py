# part5_sort_bubble.py
# 버블 정렬
# 현재 보고 있는 인덱스 요소와 다음 요소를 직접 비교하여
# 현재 보고 있는 요소가 더 크면 위치 교환,
# 현재 보고 있는 요소가 더 작으면 교환 없이 다음 요소부터 반복진행
# -> 인접한 두 요소를 비교하여 순서가 잘못되어 있으면
# 교환하는 방식으로 동작한다.
# 시간 복잡도는 선택정렬과 마찬가지로 최악의 경우 원소 개수의 제곱만큼
# 시간이 걸릴 수 있다. -> O(n^2)
# - 제자리 정렬: 추가적인 공간을 사용하지 않고 서로 맞교환
# - 안정 정렬: 같은 값을 가진 원소 간의 상대적 위치를 유지

def bubble_sort(arr: list):
    # 리스트의 길이를 추출
    n = len(arr)
    # 전체 원소 순회
    for i in range(n):
        # 최적화: 이미 정렬된 경우, 조기 종료
        swapped = False # 교환이 일어났는지 여부
        # 한 바퀴 도는 것을 패스(path)라고 하며
        # 각 패스마다 끝에서부터 i+1개의 원소는 이미 정렬되어 있으므로
        # n-(i+1)까지만 비교한다.
        # 내부 반복(패스)
        for j in range(0, n-(i+1)):
            # 인접한 두 원소를 비교하여 순서가 잘못되어 있으면 교환
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        # 정렬 후 리스트 출력
        # print(arr)
        
        # 내부 반복(패스)가 종료되었을 때
        # 교환이 없었다면 정렬 완료
        if swapped is False: break # 전체 반복 종료
    
    # 정렬 완료된 리스트 반환
    return arr

if __name__ == "__main__":
    arr = [64, 34, 25, 12, 22, 11, 90]
    sorted = bubble_sort(arr)
    print("버블 정렬 결과: ", sorted)